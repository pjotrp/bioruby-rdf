require 'bio-rdf/parsers/variant_calling/varscan2'
require 'bio-rdf/parsers/variant_calling/somaticsniper'
require 'bio-rdf/parsers/variant_calling/bamannotate'
require 'bio-rdf/parsers/copy_number/codecz'
require 'bio-rdf/parsers/genome/bed'

module BioRdf
  module Parsers
    module Variant
      module Cli

        require 'bio-logger'
        include Bio::Log

        USAGE = """

  Example

    With Varscan2 form the ID from the file name using a regular expression:

      bio-rdf variant --id '/(T[^.]+)/' --caller varscan2 T_F3_20130618.pass

    With Somatic-sniper form the ID from the file name using a regular expression:

      bio-rdf variant --id '/(T[^.]+)/' --caller somaticsniper T_F3_20130618.pass

    With BamAnnotate form the ID from the file name using a regular expression:

      bio-rdf variant --id '/(T[^.]+)/' --caller bamannotate T_F3_20130618.inheritance.bed
"""

        def Cli::handle_options 
          log = LoggerPlus.new 'variant'
          options = OpenStruct.new()
          
          opts = OptionParser.new() do |o|
            o.banner = "Usage: #{File.basename($0)} variant [options] filename(s)"
  
            o.on("--caller type",[:varscan2,:somaticsniper,:bamannotate,:codecz,:bed],"Specify caller [varscan2|somaticsniper|bamannotate|codecz|bed]") { | type |
              options.caller = type
            }

            o.on("--id-prefix str",String,"Prefix") { |s|
              options.id_prefix = s
            }

            o.on("--id expr",String,"Make id from expr") { |expr|
              options.regex = expr
            }

            o.on("--tags tags",String,"Add tags to RDF") { |tags|
              options.tags = tags
            }

            o.on_tail("-h", "--help", "Show help and examples") {
              options.show_help = true
              print(o)
            }
          end

          opts.parse!(ARGV)

          if options.show_help
            print USAGE
            exit 0
          end

          print <<EOH
# Generated by bioruby-rdf
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix : <http://biobeat.org/rdf/ns#>  .

EOH
          if ARGV[0]
            ARGV.each do | fn |
              raise "Uknown file #{fn}" if not File.exist?(fn)
              count = 0
              id = fn
              if options.regex
                fn =~ eval(options.regex) 
                id = $1
                raise "Regex not working for id #{fn} and "+options.regex if not id
              end
              full_id = if options.id_prefix 
                          options.id_prefix + '_' + id 
                        else
                          id
                        end

              tags = if options.tags 
                       eval(options.tags)
                     else
                       {}
                     end

              File.open(fn).each_line do |s|
                count += 1
                case options.caller
                  when :varscan2
                    next if s =~ /^chrom/
                    rec = BioRdf::Parsers::Varscan2::ProcessSomatic.parse(full_id,s)
                    rdf = BioRdf::Writers::Turtle::hash_to_rdf(rec.merge(tags))
                    print rdf
                    print "\n"
                  when :somaticsniper
                    rec = BioRdf::Parsers::SomaticSniper.parse(full_id,s)
                    rdf = BioRdf::Writers::Turtle::hash_to_rdf(rec.merge(tags))
                    print rdf
                    print "\n"
                  when :bamannotate
                    next if count == 1
                    rec = BioRdf::Parsers::BamAnnotate.parse(full_id,s)
                    rdf = BioRdf::Writers::Turtle::hash_to_rdf(rec.merge(tags))
                    print rdf
                    print "\n"
                  when :codecz
                    next if count == 1
                    rec = BioRdf::Parsers::CoDeCZ.parse(s)
                    rdf = BioRdf::Writers::Turtle::hash_to_rdf(rec.merge(tags))
                    print rdf
                    print "\n"
                  when :bed
                    rec = BioRdf::Parsers::Bed.parse(full_id,s)
                    rdf = BioRdf::Writers::Turtle::hash_to_rdf(rec.merge(tags))
                    print rdf
                    print "\n"
                  else
                    raise "You should provide a caller"
                end
              end
            end
          else
            raise "you should supply a valid file name!" 
          end
        end

        def Cli::do_parse input, filter, output
          log = LoggerPlus.new 'variant'
          log.level = INFO
          log.outputters = Outputter.stderr
          log.warn("Fetching "+input)
        end
      end
    end
  end
end
