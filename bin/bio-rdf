#!/usr/bin/env ruby
#
# BioRuby bio-rdf Plugin BioRdf
# Author:: Pjotr Prins

rootpath = File.dirname(File.dirname(__FILE__))
$: << File.join(rootpath,'lib')

version = File.new(File.join(rootpath,'VERSION')).read.chomp

$stderr.print "bio-rdf #{version} by Pjotr Prins (c) 2012,2013\n"

USAGE = <<EOP

  Usage: bio-rdf command [--tabulate] [options]

  Valid commands reflect parser/outputters and are:

    gsea   : Gene set enrichment analysis
    pubmed : PubMed
    extra  : Extra specialised parsers/outputters

  For more information on a command use the --help switch

EOP

if ARGV.size == 0
  print USAGE
end

require 'bio-rdf'
require 'optparse'
require 'ostruct'

# Uncomment when using the bio-logger 
require 'bio-logger'

Bio::Log::CLI.logger('stderr')
Bio::Log::CLI.trace('info')

options = {:example_switch=>false,:show_help=>false}

case ARGV[0]
  when 'gsea'
    ARGV.shift
    BioRdf::Parsers::BroadGSEA::Parser::handle_options
    exit 0
  when 'pubmed'
    ARGV.shift
    BioRdf::Parsers::PubMed::Parser::handle_options
    exit 0
  when 'extra'
    ARGV.shift
    require 'bio-rdf/extra/parsers'
    BioRdf::Extra::Parsers::handle_options
    exit 0
end

opts = OptionParser.new do |o|
  o.banner = "Usage: #{File.basename($0)} command [options]"

  # o.separator "---"
  # o.on("--tabulate", 'TODO: put a description for the SWITCH') do
  #   # TODO: your logic here, below an example
  #   self[:example_switch] = true
  # end

  # Uncomment the following when using the bio-logger 
  # o.separator ""
  # o.on("--logger filename",String,"Log to file (default stderr)") do | name |
  #   Bio::Log::CLI.logger(name)
  # end
  #
  # o.on("--trace options",String,"Set log level (default INFO, see bio-logger)") do | s |
  #   Bio::Log::CLI.trace(s)
  # end
  # 
  # o.on("-q", "--quiet", "Run quietly") do |q|
  #   Bio::Log::CLI.trace('error')
  # end
  # 
  # o.on("-v", "--verbose", "Run verbosely") do |v|
  #   Bio::Log::CLI.trace('info')
  # end
  # 
  # o.on("--debug", "Show debug messages") do |v|
  #   Bio::Log::CLI.trace('debug')
  # end

  o.separator ""
  o.on_tail('-h', '--help', 'display this help and exit') do
    options[:show_help] = true
  end
end

begin
  opts.parse!(ARGV)

  if options[:show_help]
    print USAGE
    print opts
    exit 0
  end

  # Uncomment the following when using the bio-logger 
  # Bio::Log::CLI.configure('bio-rdf')

rescue OptionParser::InvalidOption => e
  options[:invalid_argument] = e.message
end
